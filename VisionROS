#!/usr/bin/env python
import rospy
import cv2 as cv
import numpy as np
from cv_bridge import CvBridge
from sensor_msgs.msg import Image
from std_msgs.msg import Int32

traffic_light = -1

def detectar_circulos(frame, prevCircle):
    grayFrame = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)
    blurFrame = cv.GaussianBlur(grayFrame, (13, 13), 0)
    circles = cv.HoughCircles(blurFrame, cv.HOUGH_GRADIENT, 1.2 , 100, param1=50, param2=120, minRadius=10, maxRadius=300)


    # Elegir el círculo más cercano al anteriorq
    if circles is not None:
        # Convertir los parámetros de los círculos (x, y, radio) a enteros
        circles = np.uint16(np.around(circles))
        choosen = None
 
        for i in circles[0, :]:
            if choosen is None: choosen = i
            if prevCircle is not None:
                if dist(choosen[0], choosen[1], prevCircle[0], prevCircle[1]) <= dist(i[0], i[1], prevCircle[0], prevCircle[1]):
                    choosen = i

        return choosen
 
    return None

def detectar_color(frame, choosen):
    # Convertir la imagen a espacio de color HSV
    hsvFrame = cv.cvtColor(frame, cv.COLOR_BGR2HSV)


    # Definir los rangos de los colores a detectar
    colors = {"red": ([0, 70, 50], [5, 255, 255]),
              "yellow": ([20, 100, 100], [30, 255, 255]),
              "green": ([40, 50, 50], [80, 255, 255])}

   

    # Buscar el color con mayor porcentaje de píxeles en la máscara
    max_percent = 0
    color_name = "unknown"
    for name, (lower, upper) in colors.items():
        mask = cv.inRange(hsvFrame, np.array(lower), np.array(upper))
        percent = cv.countNonZero(mask) / (mask.shape[0] * mask.shape[1])
        if percent > max_percent:
            max_percent = percent
            color_name = name


    if color_name != "unknown":
        cv.putText(frame, color_name.capitalize(), (choosen[0], choosen[1]), cv.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv.LINE_AA)
    else:
        print("No detecto color")
        traffic_light = 0

    if color_name == "red":
        traffic_light = 0
    elif color_name == "yellow":
        traffic_light = 1
    elif color_name == "green":
        raffic_light = 2


# Dibujar los círculos detectados
def dibujar_circulos(frame, choosen):
    cv.circle(frame, (choosen[0], choosen[1]), 1, (0, 255, 0), 3)
    cv.circle(frame, (choosen[0], choosen[1]), choosen[2], (255, 0, 255), 3)


# Calcular la distancia entre dos puntos
def dist(x1, y1, x2, y2):
    return (float(x1) - float(x2))**2 + (float(y1) - float(y2))**2


def main(msg):
    global traffic_light
    bridge = CvBridge()
    frame = bridge.imgmsg_to_cv2(msg, desired_encoding="bgr8")
    prevCircle = None
    choosen = detectar_circulos(frame, prevCircle)
    detectar_color(frame, choosen)
    dibujar_circulos(frame, choosen)
    cv.imshow("Frame", frame)
    cv.waitKey(1)
    traffic_light_pub.publish(traffic_light)

if __name__ == '__main__':
    rospy.init_node('traffic_light_detection')
    traffic_light_pub = rospy.Publisher('/traffic_light', Int32, queue_size=10)
    rospy.Subscriber('/camera/rgb/image_raw', Image, main)
    rospy.spin()
